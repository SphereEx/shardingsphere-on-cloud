// Code generated by MockGen. DO NOT EDIT.
// Source: storagenode.go

// Package mock_storagenode is a generated GoMock package.
package mock_storagenode

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/apache/shardingsphere-on-cloud/shardingsphere-operator/api/v1alpha1"
	storagenode "github.com/apache/shardingsphere-on-cloud/shardingsphere-operator/pkg/reconcile/storagenode"
	gomock "github.com/golang/mock/gomock"
)

// MockIDBClusterClient is a mock of IDBClusterClient interface.
type MockIDBClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDBClusterClientMockRecorder
}

// MockIDBClusterClientMockRecorder is the mock recorder for MockIDBClusterClient.
type MockIDBClusterClientMockRecorder struct {
	mock *MockIDBClusterClient
}

// NewMockIDBClusterClient creates a new mock instance.
func NewMockIDBClusterClient(ctrl *gomock.Controller) *MockIDBClusterClient {
	mock := &MockIDBClusterClient{ctrl: ctrl}
	mock.recorder = &MockIDBClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDBClusterClient) EXPECT() *MockIDBClusterClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockIDBClusterClient) CreateCluster(ctx context.Context, node *v1alpha1.StorageNode, params map[string]string) (*storagenode.DatabaseCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, node, params)
	ret0, _ := ret[0].(*storagenode.DatabaseCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockIDBClusterClientMockRecorder) CreateCluster(ctx, node, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockIDBClusterClient)(nil).CreateCluster), ctx, node, params)
}

// CreateInstance mocks base method.
func (m *MockIDBClusterClient) CreateInstance(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockIDBClusterClientMockRecorder) CreateInstance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockIDBClusterClient)(nil).CreateInstance), ctx)
}

// DeleteCluster mocks base method.
func (m *MockIDBClusterClient) DeleteCluster(ctx context.Context, node *v1alpha1.StorageNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockIDBClusterClientMockRecorder) DeleteCluster(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockIDBClusterClient)(nil).DeleteCluster), ctx, node)
}

// DeleteInstance mocks base method.
func (m *MockIDBClusterClient) DeleteInstance(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockIDBClusterClientMockRecorder) DeleteInstance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockIDBClusterClient)(nil).DeleteInstance), ctx)
}

// GetCluster mocks base method.
func (m *MockIDBClusterClient) GetCluster(ctx context.Context, node *v1alpha1.StorageNode) (*storagenode.DatabaseCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, node)
	ret0, _ := ret[0].(*storagenode.DatabaseCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockIDBClusterClientMockRecorder) GetCluster(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockIDBClusterClient)(nil).GetCluster), ctx, node)
}

// GetInstances mocks base method.
func (m *MockIDBClusterClient) GetInstances(ctx context.Context, cluster *storagenode.DatabaseCluster) ([]*storagenode.DatabaseInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", ctx, cluster)
	ret0, _ := ret[0].([]*storagenode.DatabaseInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockIDBClusterClientMockRecorder) GetInstances(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockIDBClusterClient)(nil).GetInstances), ctx, cluster)
}

// IsValid mocks base method.
func (m *MockIDBClusterClient) IsValid(node *v1alpha1.StorageNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid", node)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockIDBClusterClientMockRecorder) IsValid(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockIDBClusterClient)(nil).IsValid), node)
}
