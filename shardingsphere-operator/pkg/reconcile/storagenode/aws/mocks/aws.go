// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go

// Package mock_aws is a generated GoMock package.
package mock_aws

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/apache/shardingsphere-on-cloud/shardingsphere-operator/api/v1alpha1"
	rds "github.com/database-mesh/golang-sdk/aws/client/rds"
	v1alpha10 "github.com/database-mesh/golang-sdk/kubernetes/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockIRdsClient is a mock of IRdsClient interface.
type MockIRdsClient struct {
	ctrl     *gomock.Controller
	recorder *MockIRdsClientMockRecorder
}

// MockIRdsClientMockRecorder is the mock recorder for MockIRdsClient.
type MockIRdsClientMockRecorder struct {
	mock *MockIRdsClient
}

// NewMockIRdsClient creates a new mock instance.
func NewMockIRdsClient(ctrl *gomock.Controller) *MockIRdsClient {
	mock := &MockIRdsClient{ctrl: ctrl}
	mock.recorder = &MockIRdsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRdsClient) EXPECT() *MockIRdsClientMockRecorder {
	return m.recorder
}

// Aurora mocks base method.
func (m *MockIRdsClient) Aurora() rds.Aurora {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aurora")
	ret0, _ := ret[0].(rds.Aurora)
	return ret0
}

// Aurora indicates an expected call of Aurora.
func (mr *MockIRdsClientMockRecorder) Aurora() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aurora", reflect.TypeOf((*MockIRdsClient)(nil).Aurora))
}

// Cluster mocks base method.
func (m *MockIRdsClient) Cluster() rds.Cluster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(rds.Cluster)
	return ret0
}

// Cluster indicates an expected call of Cluster.
func (mr *MockIRdsClientMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockIRdsClient)(nil).Cluster))
}

// CreateAuroraCluster mocks base method.
func (m *MockIRdsClient) CreateAuroraCluster(ctx context.Context, node *v1alpha1.StorageNode, params map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuroraCluster", ctx, node, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuroraCluster indicates an expected call of CreateAuroraCluster.
func (mr *MockIRdsClientMockRecorder) CreateAuroraCluster(ctx, node, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuroraCluster", reflect.TypeOf((*MockIRdsClient)(nil).CreateAuroraCluster), ctx, node, params)
}

// CreateInstance mocks base method.
func (m *MockIRdsClient) CreateInstance(ctx context.Context, node *v1alpha1.StorageNode, params map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", ctx, node, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockIRdsClientMockRecorder) CreateInstance(ctx, node, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockIRdsClient)(nil).CreateInstance), ctx, node, params)
}

// DeleteAuroraCluster mocks base method.
func (m *MockIRdsClient) DeleteAuroraCluster(ctx context.Context, node *v1alpha1.StorageNode, databaseClass *v1alpha10.DatabaseClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuroraCluster", ctx, node, databaseClass)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuroraCluster indicates an expected call of DeleteAuroraCluster.
func (mr *MockIRdsClientMockRecorder) DeleteAuroraCluster(ctx, node, databaseClass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuroraCluster", reflect.TypeOf((*MockIRdsClient)(nil).DeleteAuroraCluster), ctx, node, databaseClass)
}

// DeleteInstance mocks base method.
func (m *MockIRdsClient) DeleteInstance(ctx context.Context, node *v1alpha1.StorageNode, databaseClass *v1alpha10.DatabaseClass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", ctx, node, databaseClass)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockIRdsClientMockRecorder) DeleteInstance(ctx, node, databaseClass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockIRdsClient)(nil).DeleteInstance), ctx, node, databaseClass)
}

// GetAuroraCluster mocks base method.
func (m *MockIRdsClient) GetAuroraCluster(ctx context.Context, node *v1alpha1.StorageNode) (*rds.DescCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuroraCluster", ctx, node)
	ret0, _ := ret[0].(*rds.DescCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuroraCluster indicates an expected call of GetAuroraCluster.
func (mr *MockIRdsClientMockRecorder) GetAuroraCluster(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuroraCluster", reflect.TypeOf((*MockIRdsClient)(nil).GetAuroraCluster), ctx, node)
}

// GetInstance mocks base method.
func (m *MockIRdsClient) GetInstance(ctx context.Context, node *v1alpha1.StorageNode) (*rds.DescInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", ctx, node)
	ret0, _ := ret[0].(*rds.DescInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockIRdsClientMockRecorder) GetInstance(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockIRdsClient)(nil).GetInstance), ctx, node)
}

// Instance mocks base method.
func (m *MockIRdsClient) Instance() rds.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(rds.Instance)
	return ret0
}

// Instance indicates an expected call of Instance.
func (mr *MockIRdsClientMockRecorder) Instance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockIRdsClient)(nil).Instance))
}
