/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/local-storage.go

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	reflect "reflect"

	pkg "github.com/apache/shardingsphere-on-cloud/pitr/cli/internal/pkg"
	model "github.com/apache/shardingsphere-on-cloud/pitr/cli/internal/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockILocalStorage is a mock of ILocalStorage interface.
type MockILocalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockILocalStorageMockRecorder
}

// MockILocalStorageMockRecorder is the mock recorder for MockILocalStorage.
type MockILocalStorageMockRecorder struct {
	mock *MockILocalStorage
}

// NewMockILocalStorage creates a new mock instance.
func NewMockILocalStorage(ctrl *gomock.Controller) *MockILocalStorage {
	mock := &MockILocalStorage{ctrl: ctrl}
	mock.recorder = &MockILocalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILocalStorage) EXPECT() *MockILocalStorageMockRecorder {
	return m.recorder
}

// GenFilename mocks base method.
func (m *MockILocalStorage) GenFilename(extn pkg.Extension) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenFilename", extn)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenFilename indicates an expected call of GenFilename.
func (mr *MockILocalStorageMockRecorder) GenFilename(extn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenFilename", reflect.TypeOf((*MockILocalStorage)(nil).GenFilename), extn)
}

// ReadAll mocks base method.
func (m *MockILocalStorage) ReadAll() ([]*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockILocalStorageMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockILocalStorage)(nil).ReadAll))
}

// ReadByCSN mocks base method.
func (m *MockILocalStorage) ReadByCSN(csn string) (*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByCSN", csn)
	ret0, _ := ret[0].(*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByCSN indicates an expected call of ReadByCSN.
func (mr *MockILocalStorageMockRecorder) ReadByCSN(csn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByCSN", reflect.TypeOf((*MockILocalStorage)(nil).ReadByCSN), csn)
}

// ReadByID mocks base method.
func (m *MockILocalStorage) ReadByID(id string) (*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByID", id)
	ret0, _ := ret[0].(*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByID indicates an expected call of ReadByID.
func (mr *MockILocalStorageMockRecorder) ReadByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByID", reflect.TypeOf((*MockILocalStorage)(nil).ReadByID), id)
}

// WriteByJSON mocks base method.
func (m *MockILocalStorage) WriteByJSON(name string, contents *model.LsBackup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByJSON", name, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByJSON indicates an expected call of WriteByJSON.
func (mr *MockILocalStorageMockRecorder) WriteByJSON(name, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByJSON", reflect.TypeOf((*MockILocalStorage)(nil).WriteByJSON), name, contents)
}
