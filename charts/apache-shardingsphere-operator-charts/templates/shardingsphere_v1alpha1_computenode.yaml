#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

{{- if .Values.operator.featureGates.computeNode }}
apiVersion: shardingsphere.apache.org/v1alpha1
kind: ComputeNode
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    "app": {{ template "common.names.fullname" .}}
spec:
  storageNodeConnector:
    type: {{ .Values.computeNode.storageNodeConnector.type }}
    version: {{ .Values.computeNode.storageNodeConnector.version| quote}}
  serverVersion: {{ .Values.computeNode.serverVersion | default .Chart.AppVersion }}
  replicas: {{ .Values.computeNode.replicas }}
  selector:
    matchLabels:
      "app": {{ template "common.names.fullname" . }}
  portBindings:
  {{- range $.Values.computeNode.portBindings }}
    - name: {{ .name }}
      containerPort: {{ .containerPort }}
      servicePort: {{ .servicePort }}
      protocol: {{ .protocol }}
  {{- end }}{{/* $.Values.computeNode.portBindings */}}
  serviceType: {{ .Values.computeNode.serviceType }}
  {{- if .Values.computeNode.bootstrap }}
  bootstrap:
    {{- if .Values.computeNode.bootstrap.serverConfig }}
    serverConfig:
      authority:
        privilege:
          type: {{ .Values.computeNode.bootstrap.serverConfig.authority.privilege.type }}
        users:
        {{- range $.Values.computeNode.bootstrap.serverConfig.authority.users }}
          - user: {{ .user }}
            password: {{ .password }}
        {{- end }}{{/* .Values.computeNode.bootstrap.serverConfig.authority.users */}}
      mode:
        type: {{ .Values.computeNode.bootstrap.serverConfig.mode.type }}
        repository:
          type: {{ .Values.computeNode.bootstrap.serverConfig.mode.repository.type }}
          props:
            timeToLiveSeconds: {{ .Values.computeNode.bootstrap.serverConfig.mode.repository.props.timeToLiveSeconds | quote }}
            server-lists: {{ printf "%s-zookeeper.%s:2181" .Release.Name .Release.Namespace }}
            retryIntervalMilliseconds: {{ .Values.computeNode.bootstrap.serverConfig.mode.repository.props.retryIntervalMilliseconds | quote }}
            operationTimeoutMilliseconds: {{ .Values.computeNode.bootstrap.serverConfig.mode.repository.props.operationTimeoutMilliseconds | quote }}
            namespace: {{ .Values.computeNode.bootstrap.serverConfig.mode.repository.props.namespace }}
            maxRetries: {{ .Values.computeNode.bootstrap.serverConfig.mode.repository.props.maxRetries | quote }}
      props:
        proxy-frontend-database-protocol-type: {{ .Values.computeNode.bootstrap.serverConfig.props.proxyFrontendDatabaseProtocolType }}
    {{- end }}{{/* .Values.computeNode.bootstrap.serverConfig */}}
    {{- if .Values.computeNode.bootstrap.agentConfig }}
    agentConfig:
      plugins:
        metrics:
          prometheus:
            host: {{ .Values.computeNode.bootstrap.agentConfig.plugins.metrics.prometheus.host }}
            port: {{ .Values.computeNode.bootstrap.agentConfig.plugins.metrics.prometheus.port }}
            props:
              jvm-information-collector-enabled: {{.Values.computeNode.bootstrap.agentConfig.plugins.metrics.prometheus.props.jvmInformationCollectorEnabled | quote }}
    {{- end }}
  {{- end }}{{/* .Values.computeNode.bootstrap */}}
{{- end }}{{/* .Values.computeNode.enabled */}}
