// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/local-storage.go

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	pkg "github.com/apache/shardingsphere-on-cloud/pitr/cli/internal/pkg"
	model "github.com/apache/shardingsphere-on-cloud/pitr/cli/internal/pkg/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockILocalStorage is a mock of ILocalStorage interface
type MockILocalStorage struct {
	ctrl     *gomock.Controller
	recorder *MockILocalStorageMockRecorder
}

// MockILocalStorageMockRecorder is the mock recorder for MockILocalStorage
type MockILocalStorageMockRecorder struct {
	mock *MockILocalStorage
}

// NewMockILocalStorage creates a new mock instance
func NewMockILocalStorage(ctrl *gomock.Controller) *MockILocalStorage {
	mock := &MockILocalStorage{ctrl: ctrl}
	mock.recorder = &MockILocalStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockILocalStorage) EXPECT() *MockILocalStorageMockRecorder {
	return m.recorder
}

// WriteByJSON mocks base method
func (m *MockILocalStorage) WriteByJSON(name string, contents *model.LsBackup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByJSON", name, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByJSON indicates an expected call of WriteByJSON
func (mr *MockILocalStorageMockRecorder) WriteByJSON(name, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByJSON", reflect.TypeOf((*MockILocalStorage)(nil).WriteByJSON), name, contents)
}

// GenFilename mocks base method
func (m *MockILocalStorage) GenFilename(extn pkg.Extension) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenFilename", extn)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenFilename indicates an expected call of GenFilename
func (mr *MockILocalStorageMockRecorder) GenFilename(extn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenFilename", reflect.TypeOf((*MockILocalStorage)(nil).GenFilename), extn)
}

// ReadAll mocks base method
func (m *MockILocalStorage) ReadAll() ([]*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll
func (mr *MockILocalStorageMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockILocalStorage)(nil).ReadAll))
}

// ReadByID mocks base method
func (m *MockILocalStorage) ReadByID(id string) (*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByID", id)
	ret0, _ := ret[0].(*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByID indicates an expected call of ReadByID
func (mr *MockILocalStorageMockRecorder) ReadByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByID", reflect.TypeOf((*MockILocalStorage)(nil).ReadByID), id)
}

// ReadByCSN mocks base method
func (m *MockILocalStorage) ReadByCSN(csn string) (*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByCSN", csn)
	ret0, _ := ret[0].(*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByCSN indicates an expected call of ReadByCSN
func (mr *MockILocalStorageMockRecorder) ReadByCSN(csn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByCSN", reflect.TypeOf((*MockILocalStorage)(nil).ReadByCSN), csn)
}

// ReadAllByCSN mocks base method
func (m *MockILocalStorage) ReadAllByCSN(csn string) ([]*model.LsBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllByCSN", csn)
	ret0, _ := ret[0].([]*model.LsBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllByCSN indicates an expected call of ReadAllByCSN
func (mr *MockILocalStorageMockRecorder) ReadAllByCSN(csn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllByCSN", reflect.TypeOf((*MockILocalStorage)(nil).ReadAllByCSN), csn)
}

// DeleteByName mocks base method
func (m *MockILocalStorage) DeleteByName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByName indicates an expected call of DeleteByName
func (mr *MockILocalStorageMockRecorder) DeleteByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByName", reflect.TypeOf((*MockILocalStorage)(nil).DeleteByName), name)
}

// HideByName mocks base method
func (m *MockILocalStorage) HideByName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HideByName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// HideByName indicates an expected call of HideByName
func (mr *MockILocalStorageMockRecorder) HideByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideByName", reflect.TypeOf((*MockILocalStorage)(nil).HideByName), name)
}

// DeleteByHidedName mocks base method
func (m *MockILocalStorage) DeleteByHidedName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByHidedName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByHidedName indicates an expected call of DeleteByHidedName
func (mr *MockILocalStorageMockRecorder) DeleteByHidedName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByHidedName", reflect.TypeOf((*MockILocalStorage)(nil).DeleteByHidedName), name)
}
